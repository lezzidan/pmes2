/* This file has been autogenerated from 'test01.idl'. */
/* Generator component: $Id: c-backend.c,v 1.11 2004/11/19 10:00:34 perez Exp $ */
/* CHANGES TO THIS FILE WILL BE LOST */

static const char gs_generator[]="$Id: c-backend.c,v 1.11 2004/11/19 10:00:34 perez Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <jni.h>
#include "test01.h"


void Subst(file referenceCFG, double seed, double * newCFG)
{
   /* JNI environment */
   extern JNIEnv *env;
   extern jobject jobjIT;

   extern jclass clsITimpl; /* integratedtoolkit.api.impl.IntegratedToolkitImpl class */ 

   jmethodID midExecute = NULL; /* ID of the executeTask method in the integratedtoolkit.api.impl.IntegratedToolkitImpl class  */ 
   jclass clsObject = NULL; /*  java.lang.Object class */
   jmethodID midObjCon = NULL; /* ID of the java.lang.Object class constructor method */ 

   jclass clsParType = NULL; /* integratedtoolkit.api.ITExecution$ParamType class */ 
   clsParType = env->FindClass("integratedtoolkit/api/ITExecution$ParamType"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 
   jmethodID midParTypeCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamType class constructor method */ 
   midParTypeCon = env->GetStaticMethodID(clsParType, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamType;"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 

   jclass clsParDir = NULL; /* integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jmethodID midParDirCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamDirection class constructor method */ 
   jobject jobjParDirIN  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirINOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 

   clsParDir = env->FindClass("integratedtoolkit/api/ITExecution$ParamDirection"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 

   if(clsParDir != NULL) 
   { 
   	midParDirCon = env->GetStaticMethodID(clsParDir, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamDirection;"); 
   	if (env->ExceptionOccurred()) { 
   		env->ExceptionDescribe(); 
   		exit(0); 
   	} 
   	else {
			jobjParDirIN =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("IN")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirINOUT = env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("INOUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirOUT =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("OUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
		} 
   } 

   jobjectArray jobjOBJArr = NULL; /*  array of Objects to be passed to executeTask */
   if(clsITimpl != NULL) {
   	midExecute = env->GetMethodID(clsITimpl, "executeTask", "(Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/Object;)V");
   	if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   	}
	 }
   clsObject = env->FindClass("java/lang/Object");
   if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   }
   if(clsObject != NULL)
   {
   	midObjCon = env->GetMethodID(clsObject, "<init>", "()V");
   	if (env->ExceptionOccurred()) {
   			env->ExceptionDescribe();
   			exit(0);
		}
	 }
   jobjOBJArr=(jobjectArray)env->NewObjectArray(9, clsObject, env->NewObject(clsObject,midObjCon));
   /* Marshalling buffers */
   jobject jobjParTypeFile  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamType class */ 
   jobjParTypeFile = env->CallStaticObjectMethod(clsParType, midParTypeCon, env->NewStringUTF("FILE_T")); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 

   jclass clsDouble = NULL; /*  java.lang.Double class */
   jmethodID midDoubleCon = NULL; /* ID of the java.lang.Double class constructor method */ 

   clsDouble = env->FindClass("java/lang/Double");
   if (env->ExceptionOccurred()) {
   	env->ExceptionDescribe();
   	exit(0);
   }
   midDoubleCon = env->GetMethodID(clsDouble, "<init>", "(D)V");
   if (env->ExceptionOccurred()) {
   	env->ExceptionDescribe();
   	exit(0);
   }

   jobject jobjParTypeDouble  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamType class */ 
   jobjParTypeDouble = env->CallStaticObjectMethod(clsParType, midParTypeCon, env->NewStringUTF("DOUBLE_T")); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 


   /* Allocate buffers */



   /* Parameter marshalling */
   env->SetObjectArrayElement(jobjOBJArr, 0, env->NewStringUTF(referenceCFG));
   env->SetObjectArrayElement(jobjOBJArr, 1, jobjParTypeFile);
   env->SetObjectArrayElement(jobjOBJArr, 2, jobjParDirIN);
   env->SetObjectArrayElement(jobjOBJArr, 3, env->NewObject(clsDouble, midDoubleCon, seed));
   env->SetObjectArrayElement(jobjOBJArr, 4, jobjParTypeDouble);
   env->SetObjectArrayElement(jobjOBJArr, 5, jobjParDirIN);

env->CallVoidMethod(jobjIT, midExecute,  env->NewStringUTF("Matmul"),  env->NewStringUTF("matmul"), 3, jobjOBJArr);

   /* Deallocate buffers */

}

void Dimem(file newCFG, file traceFile, file DimemasOUT)
{
   /* JNI environment */
   extern JNIEnv *env;
   extern jobject jobjIT;

   extern jclass clsITimpl; /* integratedtoolkit.api.impl.IntegratedToolkitImpl class */ 

   jmethodID midExecute = NULL; /* ID of the executeTask method in the integratedtoolkit.api.impl.IntegratedToolkitImpl class  */ 
   jclass clsObject = NULL; /*  java.lang.Object class */
   jmethodID midObjCon = NULL; /* ID of the java.lang.Object class constructor method */ 

   jclass clsParType = NULL; /* integratedtoolkit.api.ITExecution$ParamType class */ 
   clsParType = env->FindClass("integratedtoolkit/api/ITExecution$ParamType"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 
   jmethodID midParTypeCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamType class constructor method */ 
   midParTypeCon = env->GetStaticMethodID(clsParType, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamType;"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 

   jclass clsParDir = NULL; /* integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jmethodID midParDirCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamDirection class constructor method */ 
   jobject jobjParDirIN  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirINOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 

   clsParDir = env->FindClass("integratedtoolkit/api/ITExecution$ParamDirection"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 

   if(clsParDir != NULL) 
   { 
   	midParDirCon = env->GetStaticMethodID(clsParDir, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamDirection;"); 
   	if (env->ExceptionOccurred()) { 
   		env->ExceptionDescribe(); 
   		exit(0); 
   	} 
   	else {
			jobjParDirIN =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("IN")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirINOUT = env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("INOUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirOUT =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("OUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
		} 
   } 

   jobjectArray jobjOBJArr = NULL; /*  array of Objects to be passed to executeTask */
   if(clsITimpl != NULL) {
   	midExecute = env->GetMethodID(clsITimpl, "executeTask", "(Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/Object;)V");
   	if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   	}
	 }
   clsObject = env->FindClass("java/lang/Object");
   if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   }
   if(clsObject != NULL)
   {
   	midObjCon = env->GetMethodID(clsObject, "<init>", "()V");
   	if (env->ExceptionOccurred()) {
   			env->ExceptionDescribe();
   			exit(0);
		}
	 }
   jobjOBJArr=(jobjectArray)env->NewObjectArray(9, clsObject, env->NewObject(clsObject,midObjCon));
   /* Marshalling buffers */
   jobject jobjParTypeFile  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamType class */ 
   jobjParTypeFile = env->CallStaticObjectMethod(clsParType, midParTypeCon, env->NewStringUTF("FILE_T")); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 


   /* Allocate buffers */



   /* Parameter marshalling */
   env->SetObjectArrayElement(jobjOBJArr, 0, env->NewStringUTF(newCFG));
   env->SetObjectArrayElement(jobjOBJArr, 1, jobjParTypeFile);
   env->SetObjectArrayElement(jobjOBJArr, 2, jobjParDirIN);
   env->SetObjectArrayElement(jobjOBJArr, 3, env->NewStringUTF(traceFile));
   env->SetObjectArrayElement(jobjOBJArr, 4, jobjParTypeFile);
   env->SetObjectArrayElement(jobjOBJArr, 5, jobjParDirIN);
   env->SetObjectArrayElement(jobjOBJArr, 8, jobjParDirOUT);

env->CallVoidMethod(jobjIT, midExecute,  env->NewStringUTF("Matmul"),  env->NewStringUTF("matmul"), 3, jobjOBJArr);

   /* Deallocate buffers */

}

void Post(file newCFG, file DimemasOUT, file FinalOUT)
{
   /* JNI environment */
   extern JNIEnv *env;
   extern jobject jobjIT;

   extern jclass clsITimpl; /* integratedtoolkit.api.impl.IntegratedToolkitImpl class */ 

   jmethodID midExecute = NULL; /* ID of the executeTask method in the integratedtoolkit.api.impl.IntegratedToolkitImpl class  */ 
   jclass clsObject = NULL; /*  java.lang.Object class */
   jmethodID midObjCon = NULL; /* ID of the java.lang.Object class constructor method */ 

   jclass clsParType = NULL; /* integratedtoolkit.api.ITExecution$ParamType class */ 
   clsParType = env->FindClass("integratedtoolkit/api/ITExecution$ParamType"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 
   jmethodID midParTypeCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamType class constructor method */ 
   midParTypeCon = env->GetStaticMethodID(clsParType, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamType;"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 

   jclass clsParDir = NULL; /* integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jmethodID midParDirCon = NULL; /* ID of the integratedtoolkit.api.ITExecution$ParamDirection class constructor method */ 
   jobject jobjParDirIN  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirINOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 
   jobject jobjParDirOUT  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamDirection class */ 

   clsParDir = env->FindClass("integratedtoolkit/api/ITExecution$ParamDirection"); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 

   } 

   if(clsParDir != NULL) 
   { 
   	midParDirCon = env->GetStaticMethodID(clsParDir, "valueOf", "(Ljava/lang/String;)Lintegratedtoolkit/api/ITExecution$ParamDirection;"); 
   	if (env->ExceptionOccurred()) { 
   		env->ExceptionDescribe(); 
   		exit(0); 
   	} 
   	else {
			jobjParDirIN =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("IN")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirINOUT = env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("INOUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
			jobjParDirOUT =  env->CallStaticObjectMethod(clsParDir, midParDirCon, env->NewStringUTF("OUT")); 
			if (env->ExceptionOccurred()) { 
				env->ExceptionDescribe(); 
				exit(0); 
			} 
		} 
   } 

   jobjectArray jobjOBJArr = NULL; /*  array of Objects to be passed to executeTask */
   if(clsITimpl != NULL) {
   	midExecute = env->GetMethodID(clsITimpl, "executeTask", "(Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/Object;)V");
   	if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   	}
	 }
   clsObject = env->FindClass("java/lang/Object");
   if (env->ExceptionOccurred()) {
   		env->ExceptionDescribe();
   		exit(0);
   }
   if(clsObject != NULL)
   {
   	midObjCon = env->GetMethodID(clsObject, "<init>", "()V");
   	if (env->ExceptionOccurred()) {
   			env->ExceptionDescribe();
   			exit(0);
		}
	 }
   jobjOBJArr=(jobjectArray)env->NewObjectArray(9, clsObject, env->NewObject(clsObject,midObjCon));
   /* Marshalling buffers */
   jobject jobjParTypeFile  = NULL; /* Instance of the integratedtoolkit.api.ITExecution$ParamType class */ 
   jobjParTypeFile = env->CallStaticObjectMethod(clsParType, midParTypeCon, env->NewStringUTF("FILE_T")); 
   if (env->ExceptionOccurred()) { 
   	env->ExceptionDescribe(); 
   	exit(0); 
   } 


   /* Allocate buffers */



   /* Parameter marshalling */
   env->SetObjectArrayElement(jobjOBJArr, 0, env->NewStringUTF(newCFG));
   env->SetObjectArrayElement(jobjOBJArr, 1, jobjParTypeFile);
   env->SetObjectArrayElement(jobjOBJArr, 2, jobjParDirIN);
   env->SetObjectArrayElement(jobjOBJArr, 3, env->NewStringUTF(DimemasOUT));
   env->SetObjectArrayElement(jobjOBJArr, 4, jobjParTypeFile);
   env->SetObjectArrayElement(jobjOBJArr, 5, jobjParDirIN);
   env->SetObjectArrayElement(jobjOBJArr, 8, jobjParDirINOUT);

env->CallVoidMethod(jobjIT, midExecute,  env->NewStringUTF("Matmul"),  env->NewStringUTF("matmul"), 3, jobjOBJArr);

   /* Deallocate buffers */

}

